---
title: "Tutorial: Hola, Quarto"
format: html
lang: es
toc: true
editor: visual
theme: minty 
number-sections: true
---

## Descripción General

Quarto es una versión multilenguaje de [próxima generación](https://quarto.org/docs/faq/rmarkdown.html) de R Markdown de RStudio e incluye docenas de nuevas funciones y capacidades, al mismo tiempo que puede procesar la mayoría de los archivos Rmd existentes sin modificaciones.

En este tutorial, mostraremos cómo usar RStudio con Quarto. Al editar el código y el markdown en RStudio tal como se haría con cualquier documento computacional (por ejemplo, R Markdown) se obtendrá una vista previa del documento renderizado en la pestaña Visor mientras se trabaja.

El siguiente es un documento en Quarto con la extensión `.qmd` (a la izquierda) junto con su versión renderizada como HTML (a la derecha). También puede elegir renderizarlo en otros formatos como PDF, MS Word, etc.

![](HolaQuarto.png){width="1000"}

Si deseas seguir este tutorial en su propio entorno, sigue los pasos que se describen a continuación.

1.  Descargue e instale la última versión de RStudio:

::: {.callout-note appearance="minimal" icon="false"}
## [Descargar RStudio](https://posit.co/download/rstudio-desktop/)
:::

2.  Para el ejemplo que mostraremos se deben instalar los paquetes `readr`, `ggplot2`,`hrbrthemes` y `scales`.

    ```{r, eval = FALSE}
    install.packages(readr)
    install.packages(ggplot2)
    install.packages(hrbrthemes)
    install.packages(scales)
    ```

3.  Descargue el documento Quarto `(.qmd)`, a continuación, ábralo en RStudio y haga clic en ![](BotonRender.png).

::: {.callout-note appearance="minimal"}
## [Descargar HolaQuarto.qmd](https://github.com/ousuga/DocumentosQuarto/blob/main/HolaQuarto.qmd)
:::

## Renderizar

Use el botón **Render** ![](BotonRender.png) en el IDE RStudio para renderizar el archivo y obtener una vista previa de la salida con un sólo click.

![](render.png){width="1000"}

Si prefiere renderizar automáticamente cada vez que guarda, puede marcar la opción **Render on Save** en la barra de herramientas del editor. La vista previa se actualizará cada vez que vuelva a renderizar el documento. La vista previa en paralelo funciona tanto para salidas HTML como PDF.

![](rendersave.png){width="1000"}

Tenga en cuenta que los documentos también se pueden representar desde la consola R a través del paquete **quarto**:

```{r, eval = FALSE}
install.packages("quarto")
quarto::quarto_render("HolaQuarto.qmd")
```

Al renderizar, Quarto genera un nuevo archivo que contiene texto, código y resultados seleccionados del archivo .qmd. El nuevo archivo puede ser un documento [HTML](https://quarto.org/docs/output-formats/all-formats.html), [PDF](https://quarto.org/docs/output-formats/pdf-basics.html), [MS Word](https://quarto.org/docs/output-formats/ms-word.html), una [presentación](https://quarto.org/docs/presentations/), un [sitio web](https://quarto.org/docs/websites/), un [libro](https://quarto.org/docs/books/), [un documento interactivo](https://quarto.org/docs/interactive/) u [otro formato](https://quarto.org/docs/output-formats/all-formats.html).

## Autoría

En la imagen de abajo podemos ver el mismo documento en los dos modos del editor de RStudio: visual (a la izquierda) y Source (a la derecha). El [editor visual](https://quarto.org/docs/visual-editor/) de RStudio ofrece una experiencia de creación [WYSIWYM](https://en.wikipedia.org/wiki/WYSIWYM) para Markdown. Para dar formato (por ejemplo, texto en negrita) puede usar la barra de herramientas o la construcción Markdown (**negrita**). Puede alternar entre estos dos modos haciendo clic en **Source** y **Visual** en la barra de herramientas del editor.

::: {layout-ncol="2"}
![](visual.png){width="800"}

![](source.png){width="800"}
:::

A continuación, dirijamos nuestra atención al contenido de nuestro documento Quarto. El archivo contiene tres tipos de contenido: un encabezado YAML, fragmentos de código y texto de markdown.

## Encabezado YAML

Un encabezado YAML (opcional) delimitado por tres guiones `(---)` en cada extremo.

```{r, eval = FALSE}
---
title: "Hola, Quarto"
author: "R-Ladies Medellín"
format: html
editor: visual
---
```

Cuando renderizamos, el `title`, `"Hola, Quarto"`, aparecerá en la parte superior del documento renderizado con un tamaño de fuente más grande que el resto del documento. Los otros tres campos YAML indican que el `author` es R-Ladies Medellín la salida debe estar en `html` `format` y el documento debe abrirse en el editor visual, de manera predeterminada.

La sintaxis básica de YAML utiliza pares clave-valor en el formato `key: value`. Otros campos YAML que se encuentran comúnmente en los encabezados de los documentos incluyen metadatos como `author`, `subtitle`, `date` y opciones de personalización como `theme`, `fontcolor`, `fig-width`, etc. Se puede obtener información sobre todos los campos YAML disponibles para documentos HTML [aquí](https://quarto.org/docs/reference/formats/html.html). Los campos YAML disponibles varían según el formato del documento, consulte [aquí](https://quarto.org/docs/reference/formats/pdf.html) los campos YAML para documentos PDF y [aquí](https://quarto.org/docs/reference/formats/docx.html) para MS Word.

## Fragmentos de código

Fragmentos de código R identificados con `{r}` con opciones de fragmento (opcional), en estilo YAML, identificados por `#\|` al principio de la línea.

``` r
#| label: load-packages
#| include: true

library(readr)

url <- 'https://raw.githubusercontent.com/ousuga/Datos/main/ds_salaries.csv'
salarios <- read_delim(url, delim = ";", escape_double = FALSE, col_types = cols(work_year = col_character(), remote_ratio = col_character()), trim_ws = TRUE)
```

En este caso, `label` del fragmento de código es `load-packages` y establecemos `include` en `false` para indicar que no queremos el fragmento en sí ni ninguna de sus salidas en los documentos representados.

Además de renderizar el documento completo para ver los resultados de los fragmentos de código, también puede ejecutar cada fragmento de código de forma interactiva en el editor de RStudio haciendo clic en el icono ![](BotonEjecutar.png). RStudio ejecuta el código y muestra los resultados en línea dentro de su archivo o en la consola, según su preferencia.

![](ejecutar.png)

## Texto markdown

Texto con formato, incluidos encabezados de sección, hipervínculos, una imagen incrustada y un fragmento de código en línea.

![](markdown.png){width="600"}

Quarto utiliza la sintaxis de markdown para el texto. Si usa el editor visual, no necesitará aprender mucha sintaxis de markdown para crear su documento, ya que puede usar los menús y accesos directos para agregar un encabezado, texto en negrita, insertar una tabla, etc. Si usa el editor de código fuente, puede conseguirlos con expresiones de markdown como `##`, `**bold**`, etc.

## Cómo funciona Quarto?

Cuando se renderiza un documento Quarto, primero [knitr](https://yihui.org/knitr/) ejecuta todos los fragmentos de código y crea un nuevo documento de markdown (.md) que incluye el código y su salida. El archivo de markdown generado es luego procesado por [pandoc](https://pandoc.org), que crea el formato terminado. El botón Render encapsula estas acciones y las ejecuta en el orden correcto para usted.

[![Tomado de Quarto.org](rstudio-qmd-how-it-works.png)](https://quarto.org/docs/get-started/hello/rstudio.html#authoring)

## Siguiente

Los tutoriales: Elementos y Autoría exploran Quarto con mayor profundidad. Este material está basado en el material presentado en [Quarto](https://quarto.org/docs/get-started/).
